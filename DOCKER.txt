
	DOCKER:
_______________________________________________________

INDICE:

[1]. Qué es Docker
    [1.1]. Conceptos
[2]. Instalación
    [2.1]. Hola mundo con Docker
[3]. Contenedores
    [3.1]. Comandos básicos
    [3.2]. Contenedora en segundo plano
    [3.3]. Modo interactivo
    [3.4]. Puertos
    [3.5]. Logs
    [3.6]. Variables de entorno
    [3.7]. Contenedores sin servicios
[4]. Redes y Volúmenes
    [4.1]. Volúmenes de Docker
    [4.2]. Compartir archivos entre contenedores
    [4.3]. Volúmenes manuales
    [4.4]. Redes
[5]. Imágenes
    [5.1]. Crear Imágen
    [5.2]. Copiar archivos
    [5.3]. Variables de Entorno
    [5.4]. Ejecutar servicios
    [5.5]. Entrypoint vs CMD
    [5.6]. Dockerizar script python
    [5.7]. Docker hub
    [5.8]. Dockerizar script node
[6]. Docker Compose
    [6.1]. Servicios
    [6.2]. Redes
    [6.3]. Volúmenes
    [6.4]. Variables de Entorno
    [6.5]. Stack Local

_______________________________________________________

	[1]. Qué es Docker:
_______________________________________________________

Docker es parecido a una maquina vitual, crea contenedoras (imagenes), que una vez configuradas nos aseguran que nuestros archivos y nuestro entorno de desarollo se va a ejecutar de la misma forma, ya sea en local o en el servidor.

A diferencia de una maquina virtual, Docker no simula hardware(procesador, memoria ram, etc).

Docker solo se ejecuta en Linux.

_______________________________________________________

	[1.1]. Conceptos:
_______________________________________________________

Dockerfile --> archivo de texto plano con las instrucciones para construir una imagen. No tiene extensión.

Imagen --> se genera a través del Dockerfile.

Contenedor --> es un objeto que se instancia a través de la imagen.

Docker Hub --> repositorio oficial (parecido a Github y Gitlab) donde se almacenan imagenes.

Docker Daemon/cli --> servicio en segundo plano para gestionar docker.

_______________________________________________________

	[2]. Instalación:
_______________________________________________________

Para instalar Docker, como solo corre en Linux, es necesario tener una maquina virtual o un WSL.

En Windows podemos seguir las siguientes instrucciones, y descargar su instalador:

    https://www.docker.com/get-started/

    https://docs.docker.com/desktop/install/windows-install/

_______________________________________________________

	[2.1]. Hola mundo con Docker:
_______________________________________________________

1) Vamos a correr una imagen de Apache, la cual podemos buscar en el Hub:

    https://hub.docker.com/

Al buscar "Apache", encontramos la siguiente imagen:

    https://hub.docker.com/_/httpd

2) En una consola, podemos ver que comandos usa docker ejecutando:

    docker

Nota: si da error anteponer: sudo

3) En el hub, copiamos el comando para la imagen de Apache, y lo ejecutamos en consola:

    docker pull httpd

4) Para ver las imagenes que tenemos corriendo usamos:

    docker image ls

5) Para crear el contenedor a partir de la imagen, usamos el comando "run":

    docker run -p 8080:80 httpd

En donde:

    "-p" --> corresponde al flag para indicar un puerto. "8080" es el puerto de la maquina local, y "80" es el puerto del contenedor.
    
    "httpd" --> es el nombre de la imagen.

Para ver que nuestra imagen esta corriendo, podemos ir al navegador a:

    localhost:8080

Nota: para dejar de correr la contenedora y poder ejecutar otros comanos en consola, usamos:

    ctrl + C

6) Para ver ayuda del comando que se quiere ejecutar usamos:

    docker run --help

_______________________________________________________

	[3]. Contenedores:
_______________________________________________________

Para manipular las contenedoras usamos unos comandos definidos, que podemos ver mejor si ejecutamos:

    docker container --help

_______________________________________________________

	[3.1]. Comandos básicos:
_______________________________________________________

- Descargar imagen y correr contenedora:

    docker run -p 8080:80 nginx

Si la imagen no esta de forma local, hace un "docker pull".

- Listar contenedores que se estan ejecutando:

    docker container ls

- Listar todos los contenedores:

    docker container ls -a

- Asignar un nombre a la contenedora:

    docker run -p 8080:80 --name test nginx

Nota 1: este nombre es como un id, si no lo asignamos Docker le asigna uno aleatoriamente. El nombre lo podemos ver al listar (docker container ls -a).

Nota 2: si se intenta asignar a una contenedora un nombre ya usado da error.

- Ver información detallada de un contenedor:

    docker container inspect nombreOidContenedora

- Eliminar contenedora (deb estar detenida):

    docker container rm nombreOidContenedora

- Eliminar todos los contenedores detenidos:

    docker container prune

_______________________________________________________

	[3.2]. Contenedora en segundo plano:
_______________________________________________________

Para correr una contenedora en segundo plano y que se libere la consola para seguir corriendo comandos usamos:

    docker container run -p 8080:80 -d nginx

Este comando es la forma estandar, el siguiente es un alias:

    docker run -p 8080:80 nginx

El comando para listar contenedoras:

    docker container ls

Tambien tiene un alias:

    docker ps

_______________________________________________________

	[3.3]. Modo interactivo:
_______________________________________________________

El modo interactivo, es un modo el cual nos permite interactuar (ejecutar comandos) dentro de nuestra contenedora.

Acá tenemos un comando para ejecutar otros comandos dentro de nuestra contenedora:

    docker exec nombreOidContenedora ls

En este caso estamos ejecutando el comano "ls" dentro de la contenedora, el cual nos va a listar los archivos y carpetas que esten dentro de está.

Sin embargo, hay algunos comandos que pueden ser dificil usarlos con el comando anterior, por lo que es mejor entrar a usar el modo interactivo, lo cual es acceder a una terminal(consola) de la contenedora:

    docker exec -it nombreOidContenedora bash

En este caso se escogio "bash", pero allí se puede cambiar a cualquier shell.

Nota: para slir de la terminal usamos el comando:
    
    exit

_______________________________________________________

	[3.4]. Puertos:
_______________________________________________________

Ya habiamos usado el flag "-p" para indicar el puerto de la contenedora 

    docker run -p 8080:80 httpd

Para ver que nuestra imagen esta corriendo, podemos ir al navegador a:

    localhost:8080

Si queremos que docker asigne un puerto random usamos el flag "-P":

    docker run -d -P nginx

Luego, para ver en que puerto se esta ejecutando la contenedora usamos:

    docker ps

Y la primera fila corresponde al ultimo contenedor corriendo.

Si sabemos el id o nombre del conetendor y queremos saber el puerto usamos:

    docker container port nombreOidContenedora

Luego para ver nuestra contenedora corriendo en el navegador nos dirigimos al puerto allí indicado, por ejemplo:

    localhost:32768

Nota: algunas tecnologias  exponen un puerto por defecto, el cual podemos consultar en el hub de docker.

_______________________________________________________

	[3.5]. Logs:
_______________________________________________________

Para poder ver los mensajes de consola (logs) de nuestra contenedora usamos el siguiente comando:

    docker logs nombreOidContenedora

Esto es muy utilo, por ejemplo si ejecutamos una contenedora en segundo plano, y esta genera algun tipo de error, entonces podremos ver esos errores.

Por ejemplo al ejecutar mysql sin establecer password, ni usuario:

    docker run -d mysql

Para ver los logs en tiempo real usamos el flag "-f":

docker logs -f nombreOidContenedora

_______________________________________________________

	[3.6]. Variables de entorno:
_______________________________________________________

Para algunas contenedoras se necesita definir variables de entorno para que se puedan ejecutar correctamente, como es le caso de mysql.

Para definir variables de entorno usamos el flag "-e":

    docker container run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD=testroot -e MYSQL_DATABASE=test mysql

En este ejemplo definimos dos variables de entorno, concatenandolas con el falg "-e".

_______________________________________________________

	[3.7]. Contenedores sin servicios:
_______________________________________________________

Hay unos contenedores que esponen un servicio en un puerto especifico, como nginx, apache, mysql, sin embargo, hay contenedores que exponen un binario, como python o ubuntu.

Para correr la imagen de ubuntu y que tenga un servicio ejecutandose en la contenedora usamos:

    docker run -d -i -t ubuntu

Nota: cuando tenemos varios flags en nuestro comando los podemos unir así:

    docker run -dit ubuntu

_______________________________________________________

	[4]. Redes y Volúmenes:
_______________________________________________________

Un volúmen es un espacio en disco duro para compartir archivos y guardar recursos del contenedor. Sirven para que los datos persistan, así se elimine la contenedora.

_______________________________________________________

	[4.1]. Volúmenes de Docker:
_______________________________________________________

- Listar volumenes:

    docker volume ls

- Creamos un volumen con el comando:

    docker volume create docker-curso

- inspeccionar volumen:

    docker volume inspect docker-curso

- Crear contenedora usando volumen:

    docker run -d --name mysql-volumen -v docker-curso:/var/lib/mysql -p 3311:3306 -e MYSQL_ROOT_PASSWORD=testroot mysql

Con el flag "-v" creamos el volumen.

docker-curso --> es el nombre del volumen.

"/var/lib/mysql" --> es la ruta donde se almacena el volumen.

De esta forma, si creamos una base de datos, y llegamos a remover la contenedora, luego volviendo a correr el comando, la contenedora recupera los datos del volumen.

_______________________________________________________

	[4.2]. Compartir archivos entre contenedores:
_______________________________________________________

Creamos otro contenedor, que comparte el mismo volumen:

    docker run -dit -v docker-curso:/docker-curso --name ubuntu-volumen ubuntu

En este caso como estamos usando el mismo volumen anterior "docker-curso",la ruta que le indicamos que sea la raíz, y que todo lo que tenia de mysql(de la contenedora anterior) lo guarde en la carpeta "/docker-curso".

_______________________________________________________

	[4.3]. Volúmenes manuales:
_______________________________________________________

Los volumenes manuales, a diferencia de los de docker, son los que creamos indicando una ruta del sistema:

    docker run -dit -v /Users/ricardo/documents:/docker-curso

Ahora si entramos a la contenedora:

    docker exec nombreOidContenedora ls

Al listar, veremos que nos creo la carpeta "/docker-curso".

_______________________________________________________

	[4.4]. Redes:
_______________________________________________________

Docker nos permite crear redes, para que las contenedoras tengan acceso a internet.

- Listar redes:

    docker network ls

Existen diferentes tipos de drivers de redes:

    null --> por defecto, la contenedora no tiene acceso a internet.

    bridge --> permite acceso a internet, hay que exponer sus puertos.

    host --> permite acceso a internet, comparte los puertos con el local.

- Para crear una red:

    docker network create docker-curso

En este caso, por defecto se crea la red de tipo "bridge" llamada "docker-curso".

- Al crear cualquier contenedora, automaticamente docker le asigna una ip, para ver esa ip usamos:

    docker inspect nombreOidContenedora

En el json impreso buscamos "Gateway".

Luego podemos en consola probar la conexión haciendo ping hacia ese gateway, por ejemplo:

    ping 172.24.0.1

- Ahora con el flag "--network", podemos poner a correr una contenedora conectandola a la red creada:

    docker run -dit --network docker-curso ubuntu

Si inspeccionamos esa contenedora (docker inspect nombreOidContenedora), podemos ver que en el json, en "Networks" sale "docker-curso".

- Crear red con driver host:

    docker run -d --network host nginx

Al usar el diver "host" no es necesario indicar el puerto con "-p 8080:80", ya que se usa la red host.

Si listamos los contenedores (docker ps), en puertos no nos sale nada.

_______________________________________________________

	[5]. Imágenes:
_______________________________________________________

Una imágen de Docker, si utilizamos la analogia de Programación Orientada a Objetos, es como una clase, podemos crear (instanciar) varios contenedores de esa imágen, pero en cada contenedor podemos realizar algunas variaciones, las cuales espeficamos en un archivo de configuración llamado "Dockerfile".

_______________________________________________________

	[5.1]. Crear Imágen:
_______________________________________________________

1) En nuestro editor de texto, cremaos un archivo llamado "Dockerfile", no tiene ninguna extensión:

    FROM ubuntu

    RUN apt-get update && apt-get install -y \
        python3 \
        curl \
        nano

En donde:

    "FROM", "RUN" --> son directivas

    "FROM" --> indicamos la imagen que vamos a usar, podemos indicar una versión de la siguiente manera: FORM ubuntu:24.04

    "RUN" --> indicamos comandos para ejecutar dentro de la contenedora.

Usamos "\" para poder instalar varios paquetes y no escribirlos todos en la misma línea, para que el comando sea más legible.

Con el flag "-y", aeptamos los terminos y condiciones de la instalación de cada paquete.

2) Para compilar nuestra imágen:

    docker build -t ubuntu-with-python .

Con el flag "-t" indicamos un nombre y de foma opcional un tag.

Con el punto ".", indicmos el path de nuestro archivo Dockerfile, en este caso como se encuentra en la misma ruta usamos el punto.

Nota: no olvidar que podemos ver todas las opciones y descripción de un comando usando "--help":

    docker build --help

3) Para ejecutar nuestra contenedora y usar comandos:

    docker run -it ubuntu-with-python

Y luego si queremos usar python:

    python3

O usar curl:

    curl localhost

O usar nano:

    nano archivo.txt

_______________________________________________________

	[5.2]. Copiar archivos:
_______________________________________________________

1) Para copiar archivos o carpetas en nuestro Dockerfile usamos la directiva COPY:

    FROM ubuntu

    RUN apt-get update && apt-get install -y \
        python3 \
        curl \
        nano

    COPY . /app

    WORKDIR /app

Acá con "COPY . /app", indicamos que lo que este en nuestro directorio actual (donde tenemos el Dockerfile), lo copie a la ruta de la contenedora "/app".

"WORKDIR" --> es una directiva que nos permite indicar el area de trabajo de nuestra contenedora, util por ejemplo si usamos mucho ubuntu, para ubicarnos en nuestra carpeta de documentos o donde necesitemos.

2) Compilar una contenedora con tag:

    docker build -t ubuntu-with-python:v2 .

3) Si ejecutamos nuestra contenedora: 

    docker run -it ubuntu-with-python:v2

Veremos que en la consola, en donde se imprem el path en donde estamos, ya nos ubica en "/app"

_______________________________________________________

	[5.3]. Variables de Entorno:
_______________________________________________________

1) En nuestro archivo Dockerfile, tambien podemos definir variables de entorno con la directiva "ENV":

    FROM ubuntu

    ENV DEBIAN_FRONTEND=noninteractive
    ENV VERSION=1.0

    ARG TEXT_EDITOR=nano

    RUN apt-get update && apt-get install -y \
        python3 \
        curl \
        $TEXT_EDITOR

    COPY . /app

    WORKDIR /app

En este ejemplo tenemos definidas dos variables de entorno "DEBIAN_FRONTEND" y "VERSION".

Ahora tambien usamos la directiva "ARG", que a diferencia de las variables de entorno, nos permiten cambiar su valor al momento de ejecutar la contenedora.

Para usar el valor definido en el argumento, usamos un signo pesos y el nombre del argumento: "$TEXT_EDITOR".

2) Compilar una contenedora con tag:

    docker build -t ubuntu-with-python:v3 --build-arg="TEXT_EDITOR=vim" .

Aca podemos ver que al ejecutar la contenedora, modificamos el argumento "TEXT_EDITOR", y en vez de instalarse en la contenedora "nano" se instala "vim"

3) Si ejecutamos nuestra contenedora: 

    docker run -it ubuntu-with-python:v3

4) Dentro de la contenedora, imprimimos la variable de entorno:

    echo $DEBIAN_FRONTEND

_______________________________________________________

	[5.4]. Ejecutar servicios:
_______________________________________________________

1) Para poder ejecutar comandos a la hora de ejecutar nesutro contenedor, lo hacemos con la directiva "CMD":

    FROM ubuntu

    ENV DEBIAN_FRONTEND=noninteractive
    ENV VERSION=1.0

    ARG TEXT_EDITOR=nano

    RUN apt-get update && apt-get install -y \
        python3 \
        curl \
        nginx

    COPY . /app

    WORKDIR /app

    CMD ["nginx", "-g", "daemon off;"]

2) Compilar una contenedora con tag:

    docker build -t ubuntu-with-python:v4 .

Aca podemos ver que al ejecutar la contenedora, modificamos el argumento "TEXT_EDITOR", y en vez de instalarse en la contenedora "nano" se instala "vim"

3) Si ejecutamos nuestra contenedora: 

    docker run -it ubuntu-with-python:v4

En consola no no sale nada, pero ya se esta ejecutando nginx, lo podemos comprobar si hacemos:

    docker exec -it nombreOidContenedora bash

Y luego:

    curl localhost

_______________________________________________________

	[5.5]. Entrypoint vs CMD:
_______________________________________________________

Los comandos definidos con CMD se pueden sobre escribir, por ejemplo si ejecutamos:

    docker run -d -p 8082:80 ubuntu-with-python:v5 ls -al

En vez de ejeutarse el comando de "nginx":

    CMD ["nginx", "-g", "daemon off;"]

Se esta ejecutando el comando:

    ls -al

Esto lo podemos verificar con "docker ps -a". Esto sucede porque el comando "docker run" permite pasar un comando.

Si se quiere evitar que se sobre escriba el comando definido dentro del Dockerfile con CMD, usamos "ENTRYPOINT":

    FROM ubuntu

    ENV DEBIAN_FRONTEND=noninteractive
    ENV VERSION=1.0

    ARG TEXT_EDITOR=nano

    RUN apt-get update && apt-get install -y \
        python3 \
        curl \
        nginx

    COPY . /app

    WORKDIR /app

    ENTRYPOINT ["nginx", "-g", "daemon off;"]

_______________________________________________________

	[5.6]. Dockerizar script python:
_______________________________________________________

1) Creamos un archivo sencillo de python, llamado "main.py":

    print("Hola mundo")

2) Creamos un script de bash, con un archivo llamado "entrypoint.sh":

    #!/bin/bash

    python3 /app/main.py

3) Creamos nuestro Dockerfile:

    FROM ubuntu

    RUN apt-get update && apt-get install -y \
        python3

    COPY . /app

    WORKDIR /app

    RUN chmod +x entrypoint.sh

    ENTRYPOINT ./entrypoint.sh

4) Compilar la contenedora:

    docker build -t ubuntu-with-python:v6 .

5) Corremos la contenedora en segundo plano:

    docker run -d ubuntu-with-python:v6

Y para ver nuestro mensaje:

    docker logs nombreOidContenedora

Nota: Si lo corremos directamente y no en segundo plano, vemos el mensaje en consola "Hola mundo", pero la contenedora se apaga automaticamente:

    docker run ubuntu-with-python:v6

_______________________________________________________

	[5.7]. Docker hub:
_______________________________________________________

Podemos subir una imagen al repositorio de Docker Hub, para poderla compartir con otras personas.

1) Creamos una cuenta en Docker Hub:

    https://hub.docker.com/

2) Creamos un repositorio en Docker Hub.

El namespace que aparece allí es nuestro usuario. En el nombre del repositorio colocamos el nombre que se quiera, por ejemplo:

    ubuntu-with-node

Opcionalmente podemos definir una descripción corta.

3) Iniciamos sesión desde consola en el local:

    docker login

4) Tagueamos la imagen:

    docker image tag ubuntu-with-python usuarioDockerHub/ubuntu-with-python:v1

Nota: la imagen debe haber sido compilada previamente (docker build).

5) Hacemos push:

    docker push usuarioDockerHub/ubuntu-with-python:v1

Ya podemos ver la imágen en Doicker Hub.

_______________________________________________________

	[5.8]. Dockerizar script node:
_______________________________________________________

1) Suponiendo que ya tenemos nuestra aplicación de node (con dependencias en el "package.json", el "index.js", carpeta "node_modules", etc.), "index.js":

    const express = require('express');
    const app = express();
    const port = 3000;

    app.get('/', (req, res) => res.send('Hello World!'));

    app.listen(port, () => console.log(`Àplicación corriendo en el puerto ${port}`));

2) Configuramos el Dockerfile:

    FROM node

    COPY . /app

    WORKDIR /app

    RUN npm install

    RUN chmod +x entrypoint.sh

    ENTRYPOINT ./entrypoint.sh

3) Como vamos a copiar todo dentro de "/app", y ya tenemos la carpeta "node_modules", pero dentro de la contenedora vamos a instalar las dependencias y generar nuevamente esta carpeta, creamos un archivo ".dockerignore":

    node_modules

Con esto ignoramos el copiado de la carpeta "node_modules".

4) Creamos el "entrypoint.sh":

    #!/bin/bash

    node /app.index.js

5) Compilamos la contenedora:

    docker build -t node-with-express:v1 .

6) Corremos la contendora:

    docker run -d -p 3000:3000 node-with-express:v1

7) Para ver el mensaje "Hello World!" usamos:

    curl localhost:3000

_______________________________________________________

	[6]. Docker Compose:
_______________________________________________________

Docker compose es un orquestador local, que nos permite tener varias contenedoras corriendo al mismo tiempo, útil para apliaciones complejas en donde cada contenedor debe correr 1 solo servicio, pero se necesitan varios servicios.

En Windows y Mac al instalar el Docker Desktop ya viene con Dockler Compose, pero en Linux se debe instalar ya que es un paquete aparte.

- Para ver los comandos que tenemos usamos:

    docker-compose --help

Los comandos que ya hemos usados ahora los definiremos en un archivo de configuración de formato ".yml".

_______________________________________________________

	[6.1]. Servicios:
_______________________________________________________

1) Creamos el archivo "docker-copose.yml":

    version: "3.8"

    services:
        ubuntu: 
            image: ubuntu
            tty: true
            container_name: ubuntu
        
        redis:
            image: redis
            container_name: redis

Acá tenemos varias similitudes con el siguiente comando:

    docker run -d -it --name ubuntu ubuntu

En donde:

    "version" --> indicamos la versión a usar de docker-compose    

    "services" --> acá definimos los servicios (contenedoras), en este caso tenemos dos llamadas "ubuntu" y "redis".

    "container_name" --> reemplaza al flag "--name".

    "tty: true" --> reemplaza a los flags "-it".

2) Ahora para ejecutar las contenedoras usamos:

    docker-compose up -d

En este caso la ejecutamos en segundo plano, y el comando no solo crea las contenedoras, sino que de una vez le asigna red.

Nota: si hacemos alguna modificación en el archivo "docker-copose.yml", y volvemos a ajecutar el comando anterior, no crea una nueva contenedora, sino que la recrea, y sigue usando la red creada anteriormente.

- Eliminar contendoras y red:

    docker-compose down

- Podemos ver los servicios corriendo con:

    docker ps

_______________________________________________________

	[6.2]. Redes:
_______________________________________________________

Creamos el archivo "docker-copose.yml":

    version: "3.8"

    services:
        ubuntu: 
            image: ubuntu
            tty: true
            container_name: ubuntu

        nginx:
            image: nginx
            container_name: nginx
            ports: 
              - "80:80"
              - "443:443"
            networks:
              - test-tutorial
        
        redis:
            image: redis
            container_name: redis
            ports:
              - "6379:6379"

    networks:
        test-tutorial:
            external: true

En este ejemplo tenemos lo siguiente:

    En ports, la sintaxis que se usa es la de arreglos en "yml". Y en "nginx" definimos varios puertos.

    El apartado "networks", usamos la red creada previamente "test-tutorial" e indicamos que es externa. Esto puede ser útil en caso de necesitarlo, pero la verdad es algo que podremos obviar, ya que sin esa configuración se crea la red correctamente.

    El unico servicio que usa la red es "nginx".
_______________________________________________________

	[6.3]. Volúmenes:
_______________________________________________________

Para definir volumenes para que persistan los datos de nuestra contendora:

Creamos el archivo "docker-copose.yml":

    version: "3.8"

    services:
        ubuntu: 
            image: ubuntu
            tty: true
            container_name: ubuntu
            volumes:
              - ./main.py:/main.py

        nginx:
            image: nginx
            container_name: nginx
            ports: 
              - "80:80"
              - "443:443"
            networks:
              - test-tutorial
        
        redis:
            image: redis
            container_name: redis
            ports:
              - "6379:6379"

        mysql:
            image: mysql
            container_name: mysql
            ports:
              - "3312:3306"
            volumes:
              - db-data:/var/lib/mysql

    volumes:
        db-data:

    networks:
        test-tutorial:
            external: true

Tenemos dos ejemplos, el volumen dde ubuntu es manual, y el volumen "db-data" es un volumen de Docker.

_______________________________________________________

	[6.4]. Variables de Entorno:
_______________________________________________________

1) Creamos el archivo "docker-copose.yml" y usamos "environment" en el servicio de "mysql":

    version: "3.8"

    services:
        ubuntu: 
            image: ubuntu
            tty: true
            container_name: ubuntu
            volumes:
              - ./main.py:/main.py

        nginx:
            image: nginx
            container_name: nginx
            ports: 
              - "80:80"
              - "443:443"
            networks:
              - test-tutorial
        
        redis:
            image: redis
            container_name: redis
            ports:
              - "6379:6379"

        mysql:
            image: mysql
            container_name: mysql
            ports:
              - "3312:3306"
            volumes:
              - db-data:/var/lib/mysql
            environment:
              - MYSQL_ROOT_PASSWORD=123456

    volumes:
        db-data:

    networks:
        test-tutorial:
            external: true

2) Para poder subir este archivo a un repositorio, mejor dejamos las variables de entorno (info sensible), definidas en un archivo aparte ".env":

    MYSQL_ROOT_PASSWORD=123456

3) Y ahora en el archivo "docker-copose.yml":

    version: "3.8"

    services:
        ubuntu: 
            image: ubuntu
            tty: true
            container_name: ubuntu
            volumes:
              - ./main.py:/main.py

        nginx:
            image: nginx
            container_name: nginx
            ports: 
              - "80:80"
              - "443:443"
            networks:
              - test-tutorial
        
        redis:
            image: redis
            container_name: redis
            ports:
              - "6379:6379"

        mysql:
            image: mysql
            container_name: mysql
            ports:
              - "3312:3306"
            volumes:
              - db-data:/var/lib/mysql
            environment:
              - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}

    volumes:
        db-data:

    networks:
        test-tutorial:
            external: true

_______________________________________________________

	[6.5]. Stack Local:
_______________________________________________________

1) Creamos el archivo "docker-copose.yml":

    version: "3.8"

    services:
        python: 
            image: python
            tty: true
            container_name: python
            volumes:
              - .:/scripts
        
        redis:
            image: redis
            container_name: redis
            ports:
              - "6379:6379"

        mysql:
            image: mysql
            container_name: mysql
            ports:
              - "3312:3306"
            volumes:
              - db-data:/var/lib/mysql
            environment:
              - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}

        phpmyadmin:
            image: phpmyadmin/phpmyadmin
            ports:
              - "8085:80"
            environment:
              - PMA_HOST=mysql

    volumes:
        db-data:

2) Creamos las contenedoras con:

    docker-compose up -d

3) Ingresamos a "phpmyadmin" en en navegador, en la ruta:

    localhost:8085

_______________________________________________________

	[6.6]. Docker Compose Build:
_______________________________________________________

Para compilar una imagen desde un archivo Dockerfile, usamos "build" dentro del archivo "docker-copose.yml":

    version: "3.8"

    services:
        node:
            build:
              context: .

        python: 
            image: python
            tty: true
            container_name: python
            volumes:
              - .:/scripts
        
        redis:
            image: redis
            container_name: redis
            ports:
              - "6379:6379"

        mysql:
            image: mysql
            container_name: mysql
            ports:
              - "3312:3306"
            volumes:
              - db-data:/var/lib/mysql
            environment:
              - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}

        phpmyadmin:
            image: phpmyadmin/phpmyadmin
            ports:
              - "8085:80"
            environment:
              - PMA_HOST=mysql

    volumes:
        db-data:

Con "context" indicamos el path donde se encuentra el archivo "Dockerfile".

Nota: se esta usando el archivo Dockerfile creado en el aprtado ([5.8]. Dockerizar script node).