	GULP.JS
_______________________________________________________
1) Instalamos Gulp.js de forma global con:

	 npm install -g gulp
_______________________________________________________

2) Verificamos que este instalado con:

	gulp –v
_______________________________________________________

3) Dentro de la carpeta del proyecto, creamos un archivo llamado:

	gulpfile.js
_______________________________________________________

4) Crear el archivo "package.json" con el siguiente comando:

	npm init

Llenamos los campos: Name, Description y Author. Los otros elementos podemos saltarlos presionando la tecla Enter.

El archivo queda algo así:

	{
	  "name": "gulp-primeros-pasos",
	  "version": "1.0",
	  "description": "Gulp: Primeros pasos",
	  "main": "gulpfile.js",
	  "author": Ricardo Landínez <landinezrichard@gmail.com>,
	  "license": "MIT"
	}

IMPORTANTE: para que npm init no falle al momento del nombre del proyecto, no usar letras mayusculas.
_______________________________________________________

5) Instalamos "gulp" como dependencia de desarrollo:

	npm install --save-dev gulp
_______________________________________________________

6) Luego instalamos pluguins para realizar todas las tareas del frontend, como: "gulp-concat", "gulp-uglify", etc...:

	npm i -D gulp-concat gulp-uglify 
	gulp-less gulp-minify-css gulp-watch
	

Nota: "npm i -D" es lo mismo que "npm install --save-dev".	

"gulp-concat" --> nos permite concatenar nuestros archivos.
"gulp-uglify" --> nos permite minificar el código JS.

Nota: para ver más pluguins, ir a:

	http://gulpjs.com/plugins/

Para ver un ejemplo de los pluguins más usados ir a:

	http://frontendlabs.io/1752--gulp-js-plugins-como-configurar-tareas
_______________________________________________________

Ejercicio:
_______________________________________________________
7) Creamos la carpeta js y dentro de esta carpeta crearemos la carpeta source.

Dentro de la carpeta source crearemos dos archivos "1.js" y "2.js":

	// contenido del archivo 1.js

	var sumar = function (a, b){
	  return a + b;
	};


	// contenido del archivo 2.js

	var restar = function (a, b){
	  return a - b;
	};

8) Ahora vamos a poner el siguiente contenido a nuestro archivo "gulpfile.js":

	/*
	* Dependencias
	*/
	var gulp = require('gulp'),
	  concat = require('gulp-concat'),
	  uglify = require('gulp-uglify');

	/*
	* Configuración de la tarea 'demo'
	*/
	gulp.task('demo', function () {
	  gulp.src('js/source/*.js')
	  .pipe(concat('todo.js'))
	  .pipe(uglify())
	  .pipe(gulp.dest('js/build/'))
	});

9) En terminal escribimos el cómando:

	gulp demo

En la carpeta "js/build" encontraremos el archivo "todo.js" con el codigo JS concatenado y minificado. Si no exite la carpeta se crea.
_______________________________________________________

Ejecutar varias tareas:

	gulp.task('estaticos', ['imagenes', 'css', 'js']);

Al ejecutar la tarea “estaticos” con el comando "gulp estaticos" se ejecutarán estas 3 tareas.

Nota: las 3 tareas correrán todas juntas al mismo tiempo sin ningún orden de ejecución.
_______________________________________________________

Tarea como Dependencia:

Para ejecutar una tarea sí y solo sí otra tarea ya se ejecuto:

	gulp.task('css', ['imagenes'], function () {
	  /*
	  * Aquí iría el contenido de mi tarea 'css'
	  * Que se ejecutará solo cuando la tarea
	  * 'imagenes' haya terminado.
	  */
	});
_______________________________________________________

Tarea por defecto:

	gulp.task('default', function () {
	  /*
	  * Código de nuestra tarea por defecto.
	  */
	});
_______________________________________________________

GULP.WATCH()

Nos permite ejecutar una o más tareas cuando haya cambios en algun archivo:

	gulp.watch('js/source/*.js', ['js']);

Cada vez que se modifique un archivo ".js" que se encuentre dentro de la carpeta "js/source/"" automáticamente se ejecutará la tarea js.
_______________________________________________________

Para más info de gulp, ir a:

	http://frontendlabs.io/1669--gulp-js-en-espanol-tutorial-basico-primeros-pasos-y-ejemplos

_______________________________________________________

	Mi Configuración de Gulp:

Instalo los siguientes pluguins:

	npm i -D gulp-uglify gulp-stylus nib gulp-webserver gulp-cssnano gulp-jade gulp-debug browserify babelify jadeify vinyl-buffer vinyl-source-stream gulp-image-optimization babel-preset-es2015 gulp-util gulp-group-css-media-queries gulp-smoosher gulp-rename

"gulp-uglify"     --> nos permite minificar el código JS.

"gulp-stylus"     --> para usar stylus.

"nib"             --> funciones extra de stylus, como añadir prefijos.

"gulp-webserver"  --> para correr un servidor con livereload.

"gulp-cssnano" --> para minificar el codigo CSS.

"gulp-jade"       --> para usar jade lang (templates html).

"gulp-debug"      --> útil para poder detectar errores.

"browserify"      --> para poder usar codigo JS modular.

"babelify"        --> para poder usar ES6.

"babel-preset-es2015"--> pluguin de babelify.

"jadeify"         --> para poder usar jade templates dentro de un archivo JS.

"vinyl-buffer"    --> para poder usar "browserify" en gulp.

"vinyl-source-stream" --> para poder usar "browserify" en gulp.

"gulp-image-optimization" --> para comprimir imagenes.

"gulp-util" --> para ver mensdajes en consola y manejar errores sin que se detengan las ejecuciones de las tareas.

"gulp-group-css-media-queries" --> agrupar los media queries, despues del pre procesamiento CSS.

"gulp-smoosher" --> incrusta de forma "embebida" el codigo CSS y JavaScript en el html, con eso se hacen menos request y carga más rápido.

"gulp-rename"  --> para renombrar y cambiar de extensión a los archivos.
_______________________________________________________

Mi archivo "gulpfile.js" queda así:

	/*
	* Dependencias
	*/
	var gulp    = require('gulp'),
	  webserver = require('gulp-webserver'),  
	  uglify    = require('gulp-uglify'),
	  stylus    = require('gulp-stylus'),
	  nib       = require('nib'),
	  nano      = require('gulp-cssnano'),
	  jade      = require('gulp-jade'),
	  browserify= require('browserify'),
	  jadeify   = require('jadeify'),
	  babelify  = require('babelify'),
	  buffer    = require('vinyl-buffer'),
	  source    = require('vinyl-source-stream'),  
	  imageop   = require('gulp-image-optimization'),
	  gutil     = require('gulp-util'),
	  groupQuerys= require('gulp-group-css-media-queries'),
	  smoosher  = require('gulp-smoosher'),
	  rename    = require('gulp-rename');

	var os = require('os');  

	/*
	* Rutas de los archivos 
	*/ 

	var paths = {
	  css:{
	    main  : 'dev/stylus/estilos.styl',
	    watch : 'dev/**/*.styl',
	    dest  : 'public/css/'
	  },
	  html:{
	    main  : 'dev/index.jade',
	    watch : 'dev/**/*.jade',
	    dest  : 'public',
	    inline: 'public/index.html'
	  },
	  js:{
	    main  : 'dev/app.js',
	    watch : 'dev/**/*.js',
	    dest  : 'public/js/'
	  },
	  images:{
	    watch : ['dev/assets/**/*.png','dev/assets/**/*.jpg','dev/assets/**/*.gif','dev/assets/**/*.jpeg'],
	    dest  : 'public/' //se guardan en public/img/
	  },
	  fonts:{
	    watch : ['dev/assets/**/*.eot','dev/assets/**/*.svg','dev/assets/**/*.ttf','dev/assets/**/*.woff'],
	    dest  : 'public/'//se guardan en public/fonts/
	  }
	};

	/*
	* Run server
	*/
	gulp.task('server', function(){  
	  gulp.src('./public')
	  .pipe(webserver({
	    host:'0.0.0.0',
	    port: '8081',
	    livereload: true
	  }))

	  var ip = getIpAddress();
	  console.log("Server running on:"+ip);
	});

	/*
	* Tarea build-css
	*/

	gulp.task('build-css', function(){
		gulp.src(paths.css.main)
	  .pipe(stylus({
	    use: nib(),
	    'include css': true
	  }))
	  .on('error', gutil.log)
	  .pipe(groupQuerys())
	  .pipe(nano())
	  .on('error', gutil.log)
	  .pipe(gulp.dest(paths.css.dest))
	});

	/*
	* Tarea build-html
	*/
	gulp.task('build-html', function() {
	  gulp.src(paths.html.main)
	  .pipe(jade({
	      pretty: true
	  }))
	  .on('error', gutil.log)
	  .pipe(gulp.dest(paths.html.dest))
	});

	/*
	* Tarea build-js
	*/
	gulp.task('build-js', function() {
	  return browserify({
	    entries: paths.js.main, //punto de entrada js
	    debug: true, 
	    transform:[["babelify",{ "presets": ['es2015'] }], jadeify] //transformaciones
	  })
	  .bundle()
	  .on('error', gutil.log)
	  .pipe(source('app.js'))//archivo destino
	  .pipe(buffer())
	  .pipe(uglify())//minificamos js
	  .on('error', gutil.log)
	  .pipe(gulp.dest(paths.js.dest))//en donde va a estar el archivo destino
	});

	/*
	* Tarea Minificar y Optimizar imagenes
	*/

	gulp.task('image-min', function(){
	  gulp.src(paths.images.watch)
	  .pipe(imageop({
	    optimizationLevel: 5,
	    progressive: true,
	    interlaced: true
	  }))
	  .pipe(gulp.dest(paths.images.dest))
	});

	/*
	* Tarea Copiar fuentes
	*/

	gulp.task('copy-fonts', function(){
	  return gulp.src(paths.fonts.watch)
	    .pipe(gulp.dest(paths.fonts.dest));
	});

	/*
	* Tarea incrustar "embebed" el CSS y JS
	*/

	gulp.task('inline', function(){
	  gulp.src(paths.html.inline)
	  .pipe(smoosher())
	  .pipe(rename({
	    suffix : '-min',
	    extname: '.html' 
	  }))
	  .pipe(gulp.dest(paths.html.dest));
	});


	/*
	* Tarea watch
	*/

	gulp.task('watch', function(){
	  gulp.watch(paths.css.watch, ['build-css']);
	  gulp.watch(paths.html.watch, ['build-html']);
	  gulp.watch(paths.js.watch, ['build-js']);
	  gulp.watch(paths.images.watch, ['image-min']);
	});

	/*
	* build all
	*/

	gulp.task('build', ['build-css','build-html','build-js']);

	/*
	* Preparar assets (imagenes, fonts)
	*/
	gulp.task('assets',['image-min','copy-fonts']);

	/*
	* Tarea por defecto
	*/

	gulp.task('default', ['server','watch','build']);


	/*
	* Para saber la ip
	*/

	// Local ip address that we're trying to calculate
	var address;

	// Provides a few basic operating-system related utility functions (built-in)

	var ifaces = os.networkInterfaces();

	function getIpAddress(){  
	  for (var dev in ifaces) {

	    var iface = ifaces[dev].filter(function(details) {
	      return details.family === 'IPv4' && details.internal === false;
	    });

	    if(iface.length > 0) address = iface[0].address;
	  }  
	  return address;
	}