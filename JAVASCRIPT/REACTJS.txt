
	REACTJS:
_______________________________________________________

INDICE:

[1]. Qué es ReactJs
    [1.1]. JSX
    [1.2]. Componentes
    [1.3]. State
    [1.4]. Props
    [1.5]. Renderizado condicional
    [1.6]. Renderizado de listas
    [1.7]. Manejando Eventos
    [1.8]. Formularios
        [1.8.1]. Dependencias para el Manejo de Formularios
    [1.9]. Hooks
        [1.9.1]. Reglas de los hooks
        [1.9.2]. Hook useEffect
        [1.9.3]. Creando Hooks
        [1.9.4]. Hooks "useRef"
            [1.9.4.1]. Manipulando el DOM con "useRef"
            [1.9.4.2]. Manipulando el DOM Custom Components
            [1.9.4.3]. Exponiendo metodos Custom Components
    [1.10]. Estilos
        [1.10.1]. Estilos en Línea
        [1.10.2]. Hoja de estilos por componente
        [1.10.3]. Módulos CSS
[2]. Vite
    [2.1]. Archivos Principales
[3]. Proyecto
    [3.1]. Scaffolding Proyecto
    [3.2]. Creando primer componente
    [3.3]. Renderizado Lista Eventos
    [3.4]. Manejando evento buscador
    [3.5]. Evento como Props
    [3.6]. Filtrando Eventos
    [3.7]. Creando Hook reusable de Eventos

_______________________________________________________

	[1]. Qué es ReactJs:
_______________________________________________________

- ReactJs es una librería para el desarrollo de Frontend moderno. 
- No es un framework. 
- Se basa en componentes. 
- Es declarativa, se le indica que renderizar, no como hacerlo (imperativa).
- Funciona usando el Virtual DOM.

_______________________________________________________

	[1.1]. JSX:
_______________________________________________________

JSX es una nueva sintaxis que nos permite combinar HTML y JavaScript, esto es util si queremeos añadir un poco de lógica al código HTML, por ejemplo si esta logueado imprima X elemento, etc.

Algunas propiedades de HTML, se escriben con camelCase, como por ejemplo "class" pasa a ser "className".

Nota: para más info de JSX ir a:

    https://react.dev/learn/writing-markup-with-jsx

Para convertir HTML a JSX, debemos seguir las siguientes reglas:

1) Retornar un solo elemento raíz, esto quiere decir que no podemos devolver varios elementos HTML sueltos, sino que deben estar todos envuieltos en un contenedor, por ejemplo:

    <div>
        <h1>Hedy Lamarr's Todos</h1>
        <img 
            src="https://i.imgur.com/yXOvdOSs.jpg" 
            alt="Hedy Lamarr" 
            class="photo"
        >
        <ul>
            <li>Invent new traffic lights
            <li>Rehearse a movie scene
            <li>Improve the spectrum technology
        </ul>
    </div>

Si no se quiere crear el "div" que envuelve todo se puede usar un Fragmento (<> y </>):

    <>
        <h1>Hedy Lamarr's Todos</h1>
        <img 
            src="https://i.imgur.com/yXOvdOSs.jpg" 
            alt="Hedy Lamarr" 
            class="photo"
        >
        <ul>
            <li>Invent new traffic lights
            <li>Rehearse a movie scene
            <li>Improve the spectrum technology
        </ul>
    </>

2) Toca cerrar todos los tags HTML, incluso si no tienen cierre, como las imagenes:

    <>
        <h1>Hedy Lamarr's Todos</h1>
        <img 
            src="https://i.imgur.com/yXOvdOSs.jpg" 
            alt="Hedy Lamarr" 
            class="photo"
        />
        <ul>
            <li>Invent new traffic lights
            <li>Rehearse a movie scene
            <li>Improve the spectrum technology
        </ul>
    </>

3) Usar camelCase en los atributos HTML:

    <img 
        src="https://i.imgur.com/yXOvdOSs.jpg" 
        alt="Hedy Lamarr" 
        className="photo"
    />

Nota: podemos usar una herramienta online de conversión para pasar de HTML a JSX:

    https://transform.tools/html-to-jsx

_______________________________________________________

	[1.2]. Componentes:
_______________________________________________________

Un componente es una función tradicional, que devuelve código de JSX.

El nombre del componente por convensión se define en PascalCase.

Nota: Para empezar, podemos usar la siguiente herramienta online para probar Vite +  React:

    https://stackblitz.com/edit/vitejs-vite-lataab?file=index.html&terminal=dev

- Creamos el archivo "MyFirstComponent.jsx" dentro de la carpeta "src":

    const MyFirstComponent = () => {
        const hola = 'Hola';
        return (
            <div>
                {hola} este es un componente!!!
            </div>
        );
    };

    export default MyFirstComponent;

O tambien podemos declarar un componente de la siguiente manera:

    function MyFirstComponent(){
        const hola = 'Hola';
        return {
            <div>
                {hola} este es un componente!!!
            </div>
        };
    }

    export default MyFirstComponent;

Nota 1: para usar variables o código JS dentro del HTML que retornamos usamos {}.

Nota 2: un archivo de JSX solo puede exportar una función.

- Para incluir el componente lo importamos y llamamos como una etiqueta HTML, en el componente principal "App.jsx":

    import { useState } from 'react';
    import './App.css';
    import MyFirstComponent from './MyFirstComponent';

    function App() {
        return (
            <>
                <MyFirstComponent />
            </>
        );
    }

_______________________________________________________

	[1.3]. State:
_______________________________________________________

React tiene un conjunto de funciones llamadas ganchos(hooks). Los ganchos te permiten agregar lógica adicional, como el estado(state), a tus componentes. Puedes pensar en el estado como cualquier información en tu interfaz de usuario que cambia con el tiempo, generalmente activado por la interacción del usuario.

Para que un componente sea reactivo, podemos declarar estados, usando "useState" podemos obtener un valor o setearlo

    import { useState } from 'react';

    const MyFirstComponent = () => {

        const [value, setValue] = useState(0);
        const [hola, setHola] = useState('Hola');

        setTimeout(() => {
            setValue(value + 1);
        }, 3000);


        return {
            <div>
                {hola} este es un componente!!! valor: {value}
            </div>
        };
    };

    export default MyFirstComponent;

Se usa desestructuración de arrays para obtener los dos valores de "useState", el primer elemento es el valor, y el segundo es el setter. 

Lo que le pasemos como argumento a la función "useState", es el valor inicial, en este ejemplo "0". Pero como valor inicial podemos asignar números, strings, objetos u otro valor que necesitemos.

Con el setter de "useState", React usa inmutabilidad, hace una copia de objeto inicial y reemplaza solo el valor que debe cambiar. Cuando se actualiza el valor, se re renderiza todo el componente.

_______________________________________________________

	[1.4]. Props:
_______________________________________________________

Los componentes de React, pueden tener propiedades, similares a los atributos HTML en una etiqueta, pero en React se llaman "props".

1) En el componente principal enviamos las props al componente hijo:

    import { useState } from 'react';
    import './App.css';
    import MyFirstComponent from './MyFirstComponent';

    function App() {

        const [value, setValue] = useState(0);

        setTimeout(() => {
            setValue(value + 1);
        }, 3000);

        return (
            <>
                <MyFirstComponent propOne={value} propTwo={2} propThree={{}} />
            </>
        );
    }

En este caso enviamos tres propiedades ( propOne={value} propTwo={2} propThree={{}} ), la ultima propiedad es un objeto vacio. Y como curiosidad en la propOne enviamos el valor del estado del componente principal.

Al actualizarse el estado del compennete principal, tambien se actualizan sus componentes hijos.

2) En el componente hijo recibimos las props como argumentos de la función:

    import { useState } from 'react';

    const MyFirstComponent = ({
        propOne,
        propTwo,
        propThree
    }) => {

        const [value, setValue] = useState(0);
        const [hola, setHola] = useState('Hola');

        setTimeout(() => {
            setValue(value + 1);
        }, 3000);

        console.log( propOne,
        propTwo,
        propThree );

        return {
            <div>
                {hola} este es un componente!!! valor: {value}
            </div>
        };
    };

    export default MyFirstComponent;

Como argumento del componente recibimos un objeto con las 3 propiedades, usamos desestructuración de objetos(solo encerramos las propiedades en {}), para que sea más sencillo acceder a las propiedades.

_______________________________________________________

	[1.5]. Renderizado condicional:
_______________________________________________________

El renderizado condicional es para mostrar determinados elementos si se cumple una condición, o si no mostrar otros:

- Usando "if else":

    if (isPacked) {
        return <li className="item">{name} ✔</li>;
    }
    return <li className="item">{name}</li>;

- Usando "operador ternario":

    return (
        <li className="item">
            {isPacked ? name + ' ✔' : name}
        </li>
    );

En JSX, {cond ? <A /> : <B />} significa: si cond, renderiza <A />, si no <B />.

- Usando operador lógico AND:

    return (
        <li className="item">
            {name} {isPacked && '✔'}
        </li>
    );

En JSX, {cond && <A />} significa: si cond, renderiza <A />, si no, nada.

- No mostrar nada con "null":

    if (isPacked) {
        return null;
    }
    return <li className="item">{name}</li>;

Nota: Para más info de renderizado condicional ir a:

    https://es.react.dev/learn/conditional-rendering

_______________________________________________________

	[1.6]. Renderizado de listas:
_______________________________________________________

Para el renderizado de listas (varios ítems), usamos dos metodos de Arrays de JavaScript: 

    filter()
    map()

Estos metodos retornan un array.

    const MyFirstComponent = () => {

        const arrayOfNumbers = [1, 2, 3, 4, 5, 6, 7, 8];

        const numberItems = arrayOfNumbers.map((item) => <li key={`array-number-item-${item}`} >{item}</li>);

        /*
        let numberItems = [];

        for(const item of arrayOfNumbers){
            numberItems.push(<li>{item}</li>);
        }
        */

        const arrayOfPeople = [
            {
                "id": 1,
                "name": "Uriel",
                "age": 20,
            },
            {
                "id": 2,
                "name": "Juan",
                "age": 24,
            },
            {
                "id": 3,
                "name": "Jose",
                "age": 21,
            },
            {
                "id": 4,
                "name": "Ismael",
                "age": 30,
            }
        ];

        const peopleItems = arrayOfPeople.map((person) => <li key={`array-person-item-${person.id}`} >{`${person.id}: ${person.name}`}</li>);

        return {
            <>
                <ul>
                    {numberItems}
                </ul>

                <ul>
                    {peopleItems}
                </ul>
            </>
        };
    };

    export default MyFirstComponent;

En React a c/u de los elementos que cremos de la lista le debemos asignar un id unico(key), ya que tiene que estar vigilandolos en caso de querer actualizar alguno.

Podemos usar un ciclo "for" de siempre para generar la lista de ítems, pero lo más usado es el método "map".

Nota: para más info del renderizado de listas ir a:

    https://es.react.dev/learn/rendering-lists

_______________________________________________________

	[1.7]. Manejando Eventos:
_______________________________________________________

Para manejar eventos, definimos dentro del componente la función que maneja el evento, la sintaxis para manejar el evento es muy similar a la que ya usa JavaScript, y usa camelCase:

    export default function Button() {
        function handleButtonClick() {
            alert('¡Me hiciste clic!');
        }

        return (
            <button onClick={handleButtonClick}>
                Hazme clic
            </button>
        );
    }

Nota 1: todos los eventos empiezan con el prefijo "on".

Nota 2: por convenciones la función manejadora del evento debemos nombrarla "handleElementoEvento", para que sea más descriptiva e indique que es un manejador de eventos.

Nota 3: si la función que maneja el evento tiene más de una línea de codigo, es mejor crear función, si no es así, se puede manejar ahí mismo:

    export default function Button() {

        return (
            <button onClick={() => alert('¡Me hiciste clic!')} >
                Hazme clic
            </button>
        );
    }

Nota 4: para más info del manejo de ventos ir a:

    https://es.react.dev/learn/responding-to-events

    https://es.react.dev/reference/react-dom/components/common

Algunas veses se desea desde el componente padre pasarle el manejador de eventos al componente hijo, esto de puede hacer desde las propiedades:

En el componente hijo:

    function Button({ onClick, children }) {
        return (
            <button onClick={onClick}>
                {children}
            </button>
        );
    }

En el componente padre:

    function UploadButton() {
        return (
            <Button onClick={() => alert('¡Subiendo!')}>
                Subir imagen
            </Button>
        );
    }

Nota: para más info ir a:

    https://es.react.dev/learn/responding-to-events#passing-event-handlers-as-props

_______________________________________________________

	[1.8]. Formularios:
_______________________________________________________

Para el uso de formularios podemos hacerlo de una manera facil, como si fuera HTML normal.

1) En un componente creamos la estructura basica del formulario:

    const SignupForm = () => {
        return (
            <form>
                <div className="form-field">
                    <label>
                        Name
                        <input value={} />
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Age
                        <input value={} />
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Address
                        <input value={} />
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Zipcode
                        <input value={} />
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Phone
                        <input value={} />
                    </label>
                </div>
            </form>
        );
    };

    export default SignupForm;

2) Para cada campo del formulario creamos un estado con su respectivo setter, y tambien manejamos el evento "onChange", para poder actualizar los valores de cada input:

    import { useState } from "react";

    const SignupForm = () => {
        const [name, setName] = useState('');
        const [age, setAge] = useState('');
        const [address, setAddress] = useState('');
        const [zipcode, setZipcode] = useState('');
        const [phone, setPhone] = useState('');

        return (
            <form>
                <div className="form-field">
                    <label>
                        Name
                        <input value={name} onChange={(event) => setName(event.target.value)} />
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Age
                        <input value={age} onChange={(event) => setAge(event.target.value)} />
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Address
                        <input value={address} onChange={(event) => setAddress(event.target.value)} />
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Zipcode
                        <input value={zipcode} onChange={(event) => setZipcode(event.target.value)} />
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Phone
                        <input value={phone} onChange={(event) => setPhone(event.target.value)} />
                    </label>
                </div>
            </form>
        );
    };

3) Para obtener los valores del formulario, manejamos las acciones del formulario con sus botones:

    const handleClearClick = () =>{
        setName('');
        setAge('');
        setAddress('');
        setZipcode('');
        setPhone('');
    };

    const handleSubmitForm = (event) =>{
        event.preventDefault();

        console.log('submit:', {
            name,
            age,
            address,
            zipcode,
            phone
        });
    };

    return (
        <form onSubmit={handleSubmitForm}>

            <div className="form-field">
                <label>
                    Name
                    <input value={name} onChange={(event) => setName(event.target.value)} required/>
                </label>
            </div>

            ...

            <div className="form__actions">
                <button type="button" onClick={handleClearClick} >Clear</button>
                <button type="submit">Submit</button>
            </div>
        </form>
    );


Nota 1: es necesario indicar el type="button" en los botones que realizan otras acciones diferentes a "submit", para evitar que hagan submit del formulario.

Nota 2: Al colocar un boton con type="submit", no se escucha el click de dicho boton, sino que se empieza a manejar el evento "onSubmit" del formulario. En su manejador hacemos "event.preventDefault();" para evitar que se recargue la página.

Nota 3: podemos añadir validaciones sencillas de HTML5, como el atributo "required" en los campos del formulario.

_______________________________________________________

	[1.8.1]. Dependencias para el Manejo de Formularios:
_______________________________________________________

Existen unas dependencias que podemos usar parea manejar el estado,  las validaciones y el envio de los campos del formulario de una forma más sencilla, entre las cuales tenemos:

    - React Hook Form (https://www.react-hook-form.com/)
    - FormiK (https://formik.org/)

1) Para usar React Hook Form, desde la raiz del proyecto instalamos la dependencia:

    npm install react-hook-form

2) En nuestro componente de formulario importamos "useForm", y en vez de usar el "useState", y el evento "onChange" en cada campo del formulario, registramos los campos:

    import { useForm } from "react-hook-form";

    const SignupForm = () => {
        const { register, handleSubmit } = useForm();

        const handleClearClick = () =>{
            
        };

        const handleSubmitForm = (data) =>{
            console.log('submit:', data);
        };

        return (
            <form onSubmit={handleSubmit(handleSubmitForm)}>
                <div className="form-field">
                    <label>
                        Name
                        <input {...register('name')} required/>
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Age
                        <input {...register('age')} required/>
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Address
                        <input {...register('address')} required/>
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Zipcode
                        <input {...register('zipcode')} required/>
                    </label>
                </div>
                <div className="form-field">
                    <label>
                        Phone
                        <input {...register('phone')} required/>
                    </label>
                </div>

                <div className="form__actions">
                    <button type="button" onClick={handleClearClick} >Clear</button>
                    <button type="submit">Submit</button>
                </div>
            </form>
        );
    };

    export default SignupForm;

Acá hicimos lo siguiente:

    - Instanciamos las funciones que vamos a usar:

        const { register, handleSubmit } = useForm();

    - Registramos los campos del formulario con:

        ...register('nombreCampo')

    - Usamos "handleSubmit" para manejar el envio del formulario, esta función recibe como parametro una función propia para manejar el evento "submit", y esa función recibe como parametro la "data" que se va a enviar.

        handleSubmit(funcionPropia)

3) Para resetear el formulario, instanciamos la función "reset":

    const SignupForm = () => {

        const { register, handleSubmit, reset } = useForm();

        const handleClearClick = () =>{
            reset();
        };

4) Para hacer las validaciones más personalizadas usamos "formState":

    const { register, handleSubmit, reset, formState: { errors } } = useForm();

    return (
        <form onSubmit={handleSubmit(handleSubmitForm)}>
            <div className="form-field">
                <label>
                    Name
                    <input {...register('name', { required: true })} />
                    {errors.name && <span>This field is required</span>}
                </label>
            </div>

_______________________________________________________

	[1.9]. Hooks:
_______________________________________________________

Los Hooks son funciones con su código ya encapsulado, que nos permiten inplementar diversas funcionalidades que ya se encuentran desarrolladas, solo tenemos que usarlas.

Uno de los Hooks que ya hemos visto es el de "useState", el cual nos sirve para obtener y setear el estado.
_______________________________________________________

	[1.9.1]. Reglas de los hooks:
_______________________________________________________

Los Hooks cumplen dos reglas:

    - Llama Hooks solo en el nivel superior; No llames Hooks dentro de ciclos, condicionales o funciones anidadas.

    - Llama Hooks solo en funciones de React; No llames Hooks desde funciones JavaScript regulares.

Nota: para más info ir a: 

    https://es.legacy.reactjs.org/docs/hooks-rules.html

_______________________________________________________

	[1.9.2]. Hook useEffect:
_______________________________________________________

El hook "useEffect" permite ejecutar código cada vez que alguna de sus dependencias cambia, se ejecuta cuando se monta el componente y cuando cambia alguna de sus dependencias.

Recibe dos argumentos:

    useEffect(() => {}, []);

El primer argumento es el "callback" o función flecha con el código que queremos que se ejecute.

El segundo argumento(opcional) es un array con sus dependencias, es decir donde le podemos indicar por ejemplo una variable, y si el valor de esa variable cambia, se ejecutaria el código del callback.

Nota 1: si necesitamos tener varios "useEffect", uno con una función y una dependencia, y otro con otra función y otra dependencia, podemos tener "N" cantidad de "useEffect" sin problemas.

Nota 2: en modo desarrollo los "useEffect" se ejecutan 2 veses, pero solo es en desarrollo.

Nota 3: para más info ir a:

    https://es.react.dev/reference/react/useEffect

_______________________________________________________

	[1.9.3]. Creando Hooks:
_______________________________________________________

Podemos crear hooks con funcionalidades que veamos que podemos reutilizar en diferentes componentes de nuestra app.

Para crear un Hook:

1) Creamos una carpeta llamada "hooks" dentro de la carpeta "src".

2) Dentro de la carpeta "hooks", creamos nuestro "archivoDeHook.js" usando las siguientes buenas practicas:

    - el nombre del archivo va en camelCase.

    - el nombre del archivo empieza con la palabra "use", seguido de lo que hace el hook, por ejemplo:

        usePokemonsData.js

Nota: la extensión del archivo es ".js" y no ".jsx", ya que no retorna un componente sino información.

3) El código del hook es una simple función modulo que puede retornar un objeto, un array o un valor. Por ejemplo:

    import pokemonsJSON from '../ruta/pokemons.json';

    const usePokemonsData = () => {

        ...

        return {
            pokemons
        }
    };

    export default usePokemonsData;

_______________________________________________________

	[1.9.4]. Hooks "useRef":
_______________________________________________________

El hook "useRef" nos sirve para referenciar un valor que no es necesario para renderizar.

Ejemplo:

    import { useRef } from 'react';

    export default function Counter() {
        let ref = useRef(0);

        function handleClick() {
            ref.current = ref.current + 1;
            alert('You clicked ' + ref.current + ' times!');
        }

        return (
            <button onClick={handleClick}>
                Click me!
            </button>
        );
    }

Las diferencias entre "useRef" y "useState" son las siguientes:

    - useRef(initialValue) retorna { current: initialValue } <-- vs --> useState(initialValue) retorna valor actual de la variable de estado y la función setter del estado ( [value, setValue]).

    - "useRef" No desencadena el render cuando cambia <-- vs --> "useState" Dispara el re renderizado cuando se modifica.

    - "useRef" es Mutable: puede modificar y actualizar el valor actual fuera del proceso de renderizado. <-- vs --> "useState" es "Inmutable": debe usar la función de setter para modificar las variables de estado para poner en cola un nuevo re rendereo.

    - Con "useRef" No debemos leer (ni escribir) el valor actual durante el renderizado. <-- vs --> Con "useState" se puede leer el estado en cualquier momento. Sin embargo, cada render tiene su propia instantánea(snapshot) del estado que no cambia.

Nota 1: Para más info y ejemplos de "useRef":

    https://react.dev/reference/react/useRef

Nota 2: Para ver las diferencias y un ejemplo de "useRef" y "useState":

    https://react.dev/learn/referencing-values-with-refs#differences-between-refs-and-state

_______________________________________________________

	[1.9.4.1]. Manipulando el DOM con "useRef":
_______________________________________________________

El hook "useRef" lo podemos usar para obtener una referencia a un elemento del DOM(guardar el elemento en una variable), y nos sirve para obtener sus atributos (HTML), modificar su contenido, obtener medidas (width, height, etc.) del elemento.

    import { useRef } from 'react';

    export default function Form() {
        const inputRef = useRef(null);

        function handleClick() {
            inputRef.current.focus();
        }

        return (
            <>
                <input ref={inputRef} />
                <button onClick={handleClick}>
                    Focus the input
                </button>
            </>
        );
    }

1) En este ejemplo, primero declaramos un objeto de referencia, con un valor inicial de null:

    const inputRef = useRef(null);

2) Luego pasamos el objeto de referencia como atributo "ref" al JSX del nodo DOM que queremos manipular:

    <input ref={inputRef} />

3) Después de que React crea el nodo DOM y lo coloca en la pantalla, React establecerá la propiedad "current" del objeto de referencia en ese nodo DOM. Ahora se puede acceder al nodo DOM del <input> y llamar a métodos como focus():

    function handleClick() {
        inputRef.current.focus();
    }

React volverá a establecer la propiedad "current" en nula cuando se elimine el nodo de la pantalla.

_______________________________________________________

	[1.9.4.2]. Manipulando el DOM Custom Components:
_______________________________________________________

Si intentamos referenciar un componente custom que hayamos creado para manipularlo, obtendremos un error, para evitar esto, envolvemos el componente hijo al que queremos manipular en el hook "forwardRef":

1) En el componente hijo:

    import { forwardRef } from 'react';

    const MyInput = forwardRef(({ value, onChange }, ref) => {
        return (
            <input
            value={value}
            onChange={onChange}
            ref={ref}
            />
        );
    });

    export default MyInput;

Nota: el hook "forwardRef" recibe como primer parametro las "props" del componente y como segundo parametro la referencia "ref":

    forwardRef( (props, ref) => {} );

2) Y en el componente padre:

    const inputRef = useRef(null);

    console.log("Referencia DOM: ", inputRef.current);

    return <MyInput ref={inputRef} />;

Nota: acá en el console.log imprimimos el elemento del DOM que se obtuvo(el componente hijo), pero podemos tenerlo en una función y por ejemplo, manipular sus atributos HTML.

_______________________________________________________

	[1.9.4.3]. Exponiendo metodos Custom Components:
_______________________________________________________

Con el hook "useImperativeHandle", en vez de devolver al padre la referencia al elementoDOM, podemos exponenr metodos o propiedades propios del componente:

1) En el componente hijo usamos "useImperativeHandle":

    import { useState, forwardRef, useImperativeHandle } from 'react';

    const MyInput = forwardRef((props, ref) => {
        const [valorInput, setValorInput] = useState(0);

        useImperativeHandle(ref, () => ({
            valorInput,
            setValorInput,
            saludar,
        }));

        function saludar() {
            console.log('Hello!!!');
        }

        return <input {...props} ref={ref} />;
    });

    export default MyInput;

En este caso al componente padre le estamos enviando "valorInput" y la función para setearlo "setValorInput".

2) En el componente padre:

    import { useRef } from 'react';
    import MyInput from './MyInput.js';

    export default function Form() {
        const ref = useRef(null);

        function handleClick() {
            console.log("Valor del input enviado desde el componente hijo: ", ref.current.valorInput);

            // setear el Valor
            ref.current.setValorInput(3);

            ref.current.saludar();


            //Esto no funcionará porque el nodo DOM no está expuesto
            // ref.current.style.opacity = 0.5;
        }

        return (
            <form>
                <MyInput placeholder="Enter your name" ref={ref} />
                <button type="button" onClick={handleClick}>
                    Editar
                </button>
            </form>
        );
    }

En el componente padre, podemos usar los metodos y propiedades que definamos en el componente hijo con "useImperativeHandle".

Nota 1: No sobreutilizar las refs. Solo debes usar las refs para comportamientos imperativos que no puedes expresar como props: por ejemplo desplazarse a un nodo, enfocar un nodo, activar una animación, seleccionar texto, etc.

Si puedes expresar algo como una prop, no deberias usar una ref. Por ejemplo, en vez de exponer un identificador imperativo como { open, close } del componente Modal, es mejor tomar isOpen como una prop, algo como <Modal isOpen={isOpen} />.

Nota 2: para mas info del hook "useImperativeHandle" ir a:

    https://es.react.dev/reference/react/useImperativeHandle

_______________________________________________________

	[1.10]. Estilos:
_______________________________________________________

Podemos añadir estilos a los componentes de varias formas:

- En línea.
- Hoja de estilos por componente.
- Modulos CSS.

_______________________________________________________

	[1.10.1]. Estilos en Línea:
_______________________________________________________

En línea, pasandole un objeto con las propiedades CSS:

    <div style={{
        marginBottom: 14,
        width: '100%',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
    }}>

Las propiedades CSS se indican en "camelCase".

Los valores de las propiedades se las podemos indicar el solo número sin unidades y por defecto lo toma en pixeles, o si queremos indicar unidades como "em", porcentajes o son más de un valor, lo hacemos en un string entre comillas.

    style={{
        padding: '4px 8px'
    }}
_______________________________________________________

	[1.10.2]. Hoja de estilos por componente:
_______________________________________________________

1) Dentro de la carpeta del componente en un archivo "styles.css" aparte, donde manejamos los estilos de forma tradicional, por clases o con los selectores que se necesiten:

    .event-item__container{
        display: flex;
        align-items: center;
        gap: 15px;
        margin: 24px 0;
    }

2) En el archivo del componente "index.jsx" importamos la hoja de estilos correspondiente, y en el HTML indicamos las clases con "className":

    import './styles.css';

    const EventItem = ({
        info,
        name,
        image,
        onEventClick,
        id
    }) => {

        const handleSeeMoreClick = (event) => {
            event.stopPropagation();
            onEventClick(id);
        };

        return(
            <div onClick={ () => console.log('padre clickeado') } className='event-item__container'>
                <img src={image} alt={name} width="200px"/>
                <div className='event-item__info'>
                    <h4 className='event-item__title'>{name}</h4>
                    <p className='event-item__desc'>{info}</p>
                    <button onClick={ handleSeeMoreClick } className='event-item__call'>Ver más</button>
                </div>
            </div>
        )
    };

    export default EventItem;
_______________________________________________________

	[1.10.3]. Módulos CSS:
_______________________________________________________

Estos modulos CSS tienen la ventaja que las clases generan un hash, para que el nombre de la clase no colisione con la clase de otro componente, quedando más encapsulados los estilos.

1) En la carpeta del compoente, creamos un archivo con el mismo nombre del compoente:

    NombreComponente.module.css

Por ejemplo:

    EventItem.module.css

2) En el archivo del modulo que creamos "NombreComponente.module.css", indicamos los estilos, pero las clases las indicamos con "camelCase":

    .eventItemContainer{
        display: flex;
        align-items: center;
        gap: 15px;
        margin: 24px 0;
    }

    .eventItemInfo{
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

3) En nuestro archivo de compoente, importamos el módulo CSS:

    import nombremodulo from './rutaModulo/NombreComponente.module.css';

Por ejemplo:

    import styles from './EventItem.module.css';

4) Y en el HTML del componente, en el "className" indicamos el modulo y la clase que se requiera:

    <div className={styles.eventItemContainer}>

Nota 1: al inspeccionar los elementos en el navegador, vemos que se aplican los estilos, y fuera de eso, a cada clase se le agrega el hash único, por ejemplo:

    <div class="_eventItemContainer_lkq6q_1" >

Nota 2: para indicarle a un elemento más de una clase, concatenamos con template strings:

    <div className=`${styles.eventItemContainer} ${styles.otraClase}`}>

_______________________________________________________

	[2]. Vite:
_______________________________________________________

Vamos a usar Vitejs como module bundler, para generar nuestro proyecto de react.

Para usarlo es necesario tener instalado node y npm.

1) En consola usamos:

    npm create vite@latest

2) Nos va a preguntar el nombre del proyecto:

    ticketmaster-events

3) Escogemos "React" cuando pregunte por framework.

4) En "variant" podemos escoger entre typescript y javaScript, escogemos javaScript.

5) Seguimos los comandos sugeridos en consola para instalar dependencia y correr el proyecto:

    cd ticketmaster-events
    npm install
    npm run dev

_______________________________________________________

	[2.1]. Archivos Principales:
_______________________________________________________

El archivo principal de nuestro proyecto es "main.jsx":

    import React from 'react'
    import ReactDOM from 'react-dom/client'
    import App from './App.jsx'
    import './index.css'

    ReactDOM.createRoot(document.getElementById('root')).render(
        <React.StrictMode>
            <App />
        </React.StrictMode>,
    )

Al metodo "createRoot" le pasamos como parametro el elemento del DOM donde se va a renderizar (con id root) toda la aplicación, y le indicamos que se renderice nuestra aplicación. 
Con "StrictMode" indicamos que nos muestre warnings de rendimiento o errores en nuestra aplicación.

Despues tenemos el archivo "App.jsx", que es nuestra aplicación.

Tenemos un solo archivo HTML llamado "index.html":

    <!doctype html>
    <html lang="en">
        <head>
            <meta charset="UTF-8" />
            <link rel="icon" type="image/svg+xml" href="/vite.svg" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Vite + React</title>
        </head>
        <body>
            <div id="root"></div>
            <script type="module" src="/src/main.jsx"></script>
        </body>
    </html>

Acá llamamos al archivo principal indicando que es un modulo.

_______________________________________________________

	[3]. Proyecto:
_______________________________________________________

Creación del proyecto el cual iremos construyendo la boletera con la API de ticketmaster.

API:

    https://developer.ticketmaster.com/products-and-docs/apis/discovery-api/v2/

_______________________________________________________

	[3.1]. Scaffolding Proyecto:
_______________________________________________________

Dentro de la carpets "src", creamos las siguientes carpetas:

    - components --> donde crearemos los componentes generales que se comparten en toda la aplicación (algunas veses llamada shared-components).
    - views --> donde va c/u de las rutas o páginas del proyecto (algunas veses llamada pages).
    - routes --> guarda c/u de las rutas o configuraciónes del enrutador del proyecto.
    - utils --> archivos con funciones de utileria, es decir que podemos importar en cualquier parte para realizar lo que necesitemos por ejemoplo llamadas a la API, etc.
    - state --> donde se hace referencia a la información global del proyecto

_______________________________________________________

	[3.2]. Creando primer componente:
_______________________________________________________

1) Dentro de la carpeta "/components", creamos una carpeta llamada "Navbar".

2) Dentro de la carpeta "/Navbar" creamos un archivo "index.jsx":

    const Navbar = () => {
        return (
            <div>
                <p>Mi Boletera</p>
                <input placeholder="Busca tu evento favorito" />
            </div>
        );
    };

    export default Navbar;

3) Importamos y usamos nuestro componente en el componente principal "App.jsx":

    import Navbar from './components/Navbar';
    import './App.css'

    function App() {

        return (
            <>
                <Navbar />
            </>
        )
    }

    export default App

_______________________________________________________

	[3.3]. Renderizado Lista Eventos:
_______________________________________________________

Como aún no consumimos información desde la API, vamos a consumir información desde en archivo JSON.

1) Creamos dentro de "/src" una carpeta llamada "/data", y adentro colocamos el archivo JSON.

Link Json:

    https://github.com/codigofacilito/ticketmaster-events-react/blob/main/src/data/events.json

2) Dentro de la carpeta "/components" creamos una nueva carpeta llamada "/Events", que alojara un componente con el mismo nombre.

3) Dentro de la carpeta "/Events", creamos un archivo "index.jsx":

    const Events = () => {

        return (
            <div>
                <p>Eventos</p>
            </div>
        );
    };

    export default Events;

4) Lo importamos y usamos desde al archivo "App.jsx":

    import Navbar from './components/Navbar';
    import Events from './components/Events';
    import './App.css'

    function App() {

        return (
            <>
            <Navbar />
            <Events />
            </>
        )
    }

    export default App

5) Dentro de la carpeta "/Events", creamos una carpeta llamada "/components", para crear allí los componentes hijos del componente "Events".

6) Dentro de "/Events/components" creamos la carpeta "/EventItem".

7) Dentro de la carpeta "/EventItem", creamos un archivo "index.jsx":

    const EventItem = () => {
        return(
            <div>
                Event ítem
            </div>
        )
    };

    export default EventItem;

8) Importamos el componente "EventItem" dentro del componente "Events":

    import EventItem from "./components/EventItem";
    import data from "../../data/events.json";

    console.log(data);

    const events = data._embedded.events;

    const Events = () => {

        return (
            <div>
                <p>Eventos</p>

                <EventItem />
            </div>
        );
    };

    export default Events;

Tambien importamos el archivo JSON con la data, y hacemos una impresión en consola para ver como viene la data.

La siguiente línea:

    const events = data._embedded.events;

La podemos cambiar por la siguiente usando "desestructuración de objetos":

    const { _embedded: {events} } = data;

9) Usamos los conocimientos de renderizado de listas para renderizar los EventItem:

    const Events = () => {

    const eventsComponent = events.map((eventItem) => <EventItem key={`event-item-${eventItem.id}`} />);

        return (
            <div>
                <p>Eventos</p>

                { eventsComponent }
            </div>
        );
    };

Acá en el método "map", devolvemos un "EventItem", indicandole el id unico en el argumento "key".

10) En "EventItem", recibimos las propiedades que se van a enviar desde el componente padre, para mostrar la información del evento:

    const EventItem = ({
        info,
        name,
        image
    }) => {
        return(
            <div>
                <img src={image} alt={name} width="200px"/>
                <h4>{name}</h4>
                <p>{info}</p>
            </div>
        )
    };

    export default EventItem;

De momento solo recibimos 3 datos del evento, el nombre, una descripción y la url de la imagen.

11) Ahora en el componente padre "Events", enviamos las propiedades al componente hijo:

    import EventItem from "./components/EventItem";
    import data from "../../data/events.json";

    console.log(data);

    const events = data._embedded.events;

    const Events = () => {

        const eventsComponent = events.map((eventItem) => (
            <EventItem 
                key={`event-item-${eventItem.id}`}
                name={eventItem.name}
                info={eventItem.info}
                image={eventItem.images[0].url}
            />
        ));

        return (
            <div>
                <p>Eventos</p>

                { eventsComponent }
            </div>
        );
    };

    export default Events;

12) La información de momento es estatica, pero podemos almacenarla en un estado, por si cambia en un futuro:

    import { useState } from "react";

    import EventItem from "./components/EventItem";
    import eventsJSON from "../../data/events.json";

    // console.log(data);

    const Events = () => {
        const [data] = useState(eventsJSON);

        const events = data._embedded.events;
        const eventsComponent = events.map((eventItem) => (
            <EventItem 
                key={`event-item-${eventItem.id}`}
                name={eventItem.name}
                info={eventItem.info}
                image={eventItem.images[0].url}
            />
        ));

        return (
            <div>
                <p>Eventos</p>

                { eventsComponent }
            </div>
        );
    };

    export default Events;

_______________________________________________________

	[3.4]. Manejando evento buscador:
_______________________________________________________

En el componente "Navbar", añadimos un manejador de eventos en el input de busqueda:

    import { useState } from "react";

    const Navbar = () => {
        const [search, setSearch] = useState('');

        const handleInputChange = (event) => {
            setSearch(event.target.value);
        };

        console.log(search);

        return (
            <div>
                <p>Mi Boletera</p>
                <input 
                    placeholder="Busca tu evento favorito"
                    onChange={handleInputChange} 
                    value={search}
                />
            </div>
        );
    };

    export default Navbar;

Para el input tambien manejamos un estado, su valor inicial lo definimos como un string vacio, o sino el estado inicial seria "undefined" y nos saldria un warning en consola.

En el atributo "value" del input le asignamos el valor de "search", y en el manejador de eventos seteamos esa propiedad con el nuevo valor ingresado, si no lo hacemos, al escribir en el input no se actualiza el valor, y es como si no escribieramos nada, no se ve.

_______________________________________________________

	[3.5]. Evento como Props:
_______________________________________________________

1) En el componente "Events", vamos a manejar el click de cada evento social, y se lo pasaremos al componente hijo a través de sus propiedades:

    import { useState } from "react";

    import EventItem from "./components/EventItem";
    import eventsJSON from "../../data/events.json";

    const Events = () => {
        const [data] = useState(eventsJSON);

        const handleEventItemClick = (id) => {
            console.log('Evento clickeado: ', id);
        };

        const events = data._embedded.events;
        const eventsComponent = events.map((eventItem) => (
            <EventItem 
                key={`event-item-${eventItem.id}`}
                name={eventItem.name}
                info={eventItem.info}
                image={eventItem.images[0].url}
                onEventClick={handleEventItemClick}
                id={eventItem.id}
            />
        ));

        return (
            <div>
                <p>Eventos</p>

                { eventsComponent }
            </div>
        );
    };

    export default Events;

La propiedad que se le pasa al componente hijo para manejar el evento click es "onEventClick".

2) En el componente hijo "EventItem" recibimos las props y asignamos al evento click la función manejadora que recibimos desde el padre:

    const EventItem = ({
        info,
        name,
        image,
        onEventClick,
        id
    }) => {
        return(
            <div>
                <img src={image} alt={name} width="200px"/>
                <h4>{name}</h4>
                <p>{info}</p>
                <button onClick={ () => onEventClick(id) }>Ver más</button>
            </div>
        )
    };

    export default EventItem;

Como la función manejadora del padre recibe como parámetro el "id", donde asignamos el evento click, le asignamos una función anonima, para que nos permita enviar el parametro, si no lo hacemos cometemos un error y se empieza a ejecutar la función manejadora sin necesidad de hacer click e infinitamente y se bloquea la aplicación.

3) Cuando tenemos una función muy larga, podemos tenerla aparte para tener más limpio el código del "return":

    const EventItem = ({
        info,
        name,
        image,
        onEventClick,
        id
    }) => {

        const handleSeeMoreClick = (event) => {
            event.stopPropagation();
            onEventClick(id);
        };

        return(
            <div onClick={ () => console.log('padre clickeado') }>
                <img src={image} alt={name} width="200px"/>
                <h4>{name}</h4>
                <p>{info}</p>
                <button onClick={ handleSeeMoreClick }>Ver más</button>
            </div>
        )
    };

    export default EventItem;

En este caso creamos la función "handleSeeMoreClick", que recibe el paramentro "event", para evitar el "event bubbling", y no se haga click tambien en el padre.

_______________________________________________________

	[3.6]. Filtrando Eventos:
_______________________________________________________

Para poder filtrar los eventos a través del input de busqueda que tenemos en el navbar, es necesario hacer una comunicación del padre de los componentes de "Navbar" y "Events", esto lo logramos gracias a las props, desde el padre obtenemos la busqueda escrita en el input del "Navbar", y luego enviamos esa busqueda al listado "Events", donde filtraremos.

1) En el componente padre "App.jsx":

    import { useState } from 'react';

    import Navbar from './components/Navbar';
    import Events from './components/Events';
    import './App.css'

    function App() {
        const [searchTerm, setSearchTerm] = useState('');

        const handleNavbarSearch = (term) => {
            setSearchTerm(term);
        };

        return (
            <>
            <Navbar onSearch={handleNavbarSearch} />
            <Events searchTerm={searchTerm} />
            </>
        )
    }

    export default App

Creamos un estado "searchTerm" con su respectivo setter. Al "Navbar", le pasamos por las props la función para setear la busqueda, y al componente "Events", se le envia esa busqueda una vez seteada en el estado "searchTerm".

2) En el componente "Navbar":

    import { useState } from "react";

    const Navbar = ({onSearch}) => {
        const [search, setSearch] = useState('');

        const handleInputChange = (event) => {
            setSearch(event.target.value);
        };

        const handleInputKeyDown = (event) => {
            if(event.key === 'Enter'){
                onSearch(search);
            }
        };

        // console.log(search);

        return (
            <div>
                <p>Mi Boletera</p>
                <input 
                    placeholder="Busca tu evento favorito"
                    onChange={handleInputChange} 
                    value={search}
                    onKeyDown={handleInputKeyDown}
                />
            </div>
        );
    };

    export default Navbar;

Acá des estructuramos de las props la función "onSearch", la cual usamos en la función que va a escuchar cuando presionamos en el teclado la tecla "Enter" para enviar la busqueda, con esto se actualiza el estado del padre.

3) Filtramos la busqueda en el componente "Events":

    const Events = ({ searchTerm }) => {
        const [data] = useState(eventsJSON);
        const events = data._embedded.events;
        
        const handleEventItemClick = (id) => {
            console.log('Evento clickeado: ', id);
        };

        const renderEvents = () => {
            let eventsFiltered = events;
            
            if(searchTerm.length > 0){
                eventsFiltered = eventsFiltered.filter((item) => item.name.toLocaleLowerCase().includes(searchTerm));
            }

            return eventsFiltered.map((eventItem) => (
                <EventItem 
                    key={`event-item-${eventItem.id}`}
                    name={eventItem.name}
                    info={eventItem.info}
                    image={eventItem.images[0].url}
                    onEventClick={handleEventItemClick}
                    id={eventItem.id}
                />
            ));
        };

        return (
            <div>
                <p>Eventos</p>

                { renderEvents() }
            </div>
        );
    };

Recibimos en las props la busqueda, para tener más limpio el return, llamamos la función "renderEvents()", encargada de filtrar y renderizar los ítems. Comprueba si existe la busqueda:

    if(searchTerm.length > 0)

Y luego utiliza la función de arrays "filter", que se usa de manera similar a la función "map". Devuelve el/los ítem(s) que incluyan en su nombre el termino de busqueda "searchTerm". En caso de no existir el termino de busqueda, devuelve todos los ítems.

_______________________________________________________

	[3.7]. Creando Hook reusable de Eventos:
_______________________________________________________

Vamos a crear un hook que nos devuelva la data de los eventos, este hook lo podremos utilizar en varios componentes.

1) Creamos una carpeta llamada "hooks" dentro de la carpeta "src".

2) Creamos el archivo "useEventsData.js":

    import { useState } from "react";

    import eventsJSON from '../data/events.json';

    const useEventsData = () => {

        const [data] = useState(eventsJSON);
        const events = data._embedded.events;

        return {
            events
        };
    };

    export default useEventsData;

En este hook extraemos el código que estabamos usando en el componente de "Events" (src\components\Events\index.jsx).

Nota: el uso de "useState", funciona porque usaremos el hook "useEventsData" en un componente de react, si no, no funcionara en una función de js normal.

3) Llamamos nuestro hook en el componente de "Events" (src\components\Events\index.jsx):

    import useEventsData from "../../hooks/useEventsData";

    import EventItem from "./components/EventItem";

    const Events = ({ searchTerm }) => {
        
        const { events } = useEventsData();

Como en el hook "useEventsData" retornamos un objeto, acá lo desestructuramos para poder hacer uso simplemente de "events".